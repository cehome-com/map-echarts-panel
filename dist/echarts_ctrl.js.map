{"version":3,"sources":["../src/echarts_ctrl.js"],"names":["MetricsPanelCtrl","_","echarts","EchartsCtrl","$scope","$injector","panelDefaults","EchartsOption","IS_MAP","map","METHODS","USE_URL","USE_FAKE_DATA","fakeData","url","method","params","updateInterval","maps","defaults","panel","events","on","onDataReceived","bind","onDataError","onInitEditMode","render","updateData","that","xmlhttp","data","eval","window","XMLHttpRequest","ActiveXObject","onreadystatechange","readyState","status","JSON","parse","responseText","open","send","setRequestHeader","$timeout","dataList","IS_DATA_CHANGED","addEditorTab","System","import","getPanelPath","panels","grafanaBootData","settings","thisPanel","pluginId","thisPanelPath","baseUrl","scope","elem","attrs","ctrl","$panelContainer","find","option","echartsData","myChart","init","importMap","setTimeout","resize","clear","setOption","renderingCompleted","templateUrl"],"mappings":"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","file":"echarts_ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk'; // eslint-disable-line\r\nimport _ from 'lodash';\r\nimport echarts from './libs/echarts.min'; // eslint-disable-line\r\nimport './libs/echarts-liquidfill.min'; // eslint-disable-line\r\nimport './libs/echarts-wordcloud.min'; // eslint-disable-line\r\nimport './libs/dark'; // eslint-disable-line\r\nimport './css/style.css!'; // eslint-disable-line\r\n//import './libs/bmap.js'; // eslint-disable-line\r\nimport './libs/china.js' // eslint-disable-line\r\nimport './libs/beijing.js'// eslint-disable-line\r\nimport './libs/jiangxi.js'// eslint-disable-line\r\n//import './libs/getBmap.js'; // eslint-disable-line\r\n\r\nexport class EchartsCtrl extends MetricsPanelCtrl { // eslint-disable-line\r\n\r\n  constructor($scope, $injector) {\r\n    super($scope, $injector);\r\n\r\n    const panelDefaults = {\r\n      EchartsOption: 'console.log(JSON.stringify(echartsData));\\n\\noption = {};',\r\n      IS_MAP: false,\r\n      map: '',\r\n      METHODS: ['POST', 'GET'],\r\n      USE_URL: false,\r\n      USE_FAKE_DATA: true,\r\n      fakeData: '',\r\n      url: '',\r\n      method: 'GET',\r\n      params: '',\r\n      updateInterval: 10000,\r\n    };\r\n\r\n    this.maps = ['世界', '中国', '河北'];\r\n\r\n    _.defaults(this.panel, panelDefaults);\r\n\r\n    this.events.on('data-received', this.onDataReceived.bind(this));\r\n    this.events.on('data-error', this.onDataError.bind(this));\r\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('panel-initialized', this.render.bind(this));\r\n\r\n    this.updateData();\r\n  }\r\n\r\n  //请求\r\n  updateData() {\r\n    const that = this;\r\n    let xmlhttp;\r\n    if (this.panel.USE_URL && this.panel.USE_FAKE_DATA && this.panel.fakeData) {\r\n      this.data = eval(this.panel.fakeData);\r\n    } else if (that.panel.USE_URL && !that.panel.USE_FAKE_DATA && that.panel.url && that.panel.method) {\r\n      if (window.XMLHttpRequest) {\r\n        xmlhttp = new XMLHttpRequest();\r\n      } else {\r\n        xmlhttp = new ActiveXObject('Microsoft.XMLHTTP'); // eslint-disable-line\r\n      }\r\n      xmlhttp.onreadystatechange = () => {\r\n        if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {\r\n          that.data = JSON.parse(xmlhttp.responseText);\r\n          that.onDataReceived();\r\n        }\r\n      };\r\n      if(that.panel.method == 'GET'){\r\n          if(that.panel.params){\r\n            xmlhttp.open(that.panel.method, that.panel.url + '?' + that.panel.params, true);\r\n          }else{\r\n            xmlhttp.open(that.panel.method, that.panel.url, true);\r\n          }\r\n          xmlhttp.send();\r\n      }else{\r\n        xmlhttp.open(that.panel.method, that.panel.url, true);\r\n        xmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\r\n        xmlhttp.send(that.panel.params);\r\n      }\r\n\r\n    } else {\r\n      xmlhttp = null;\r\n    }\r\n\r\n    this.$timeout(() => { this.updateData(); }, that.panel.updateInterval);\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    this.data = !this.panel.USE_URL && !this.panel.USE_FAKE_DATA ? dataList : this.data;\r\n\r\n    this.IS_DATA_CHANGED = true;\r\n    this.render();\r\n    this.IS_DATA_CHANGED = false;\r\n  }\r\n\r\n  onDataError() {\r\n    this.render();\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Data Source', 'public/plugins/map-echarts-panel/partials/editer-metric.html', 2);\r\n    this.addEditorTab('Ecahrts Configuration', 'public/plugins/map-echarts-panel/partials/editor-echarts.html', 3);\r\n  }\r\n\r\n  importMap() {\r\n    if (!this.panel.IS_MAP) return;\r\n    switch (this.panel.map) {\r\n      case '世界':\r\n        System.import(this.getPanelPath() + 'libs/world.js'); // eslint-disable-line\r\n        break;\r\n      case '中国':\r\n        System.import(this.getPanelPath() + 'libs/china.js'); // eslint-disable-line\r\n        break;\r\n      case '河北':\r\n        System.import(this.getPanelPath() + 'libs/hebei.js'); // eslint-disable-line\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  getPanelPath() {\r\n      var panels = grafanaBootData.settings.panels;\r\n      var thisPanel = panels[this.pluginId];\r\n      var thisPanelPath = thisPanel.baseUrl + '/';\r\n      return thisPanelPath; // eslint-disable-line\r\n  }\r\n\r\n  link(scope, elem, attrs, ctrl) {\r\n    const $panelContainer = elem.find('.echarts_container')[0];\r\n    let option = {}; // eslint-disable-line\r\n    let echartsData = []; // eslint-disable-line\r\n\r\n    ctrl.IS_DATA_CHANGED = true;\r\n\r\n    // function setHeight() {\r\n    //   let height = ctrl.height || panel.height || ctrl.row.height;\r\n    //   if (_.isString(height)) {\r\n    //     height = parseInt(height.replace('px', ''), 10);\r\n    //   }\r\n    //   // height -= 7;\r\n    //   // height -= ctrl.panel.title ? 25 : 9;\r\n    //   $panelContainer.style.height = height + 'px';\r\n    // }\r\n\r\n    // // function setWidth() {\r\n    // //   let width = document.body.clientWidth;\r\n    // //   width = (width - 5.6 * 2) * ctrl.panel.span / 12 - 5.6 * 2 - 1 * 2 - 10 * 2;\r\n    // //   $panelContainer.style.width = width + 'px';\r\n    // // }\r\n\r\n    // setHeight();\r\n    // // setWidth();\r\n\r\n    const myChart = echarts.init($panelContainer, 'dark');\r\n\r\n    ctrl.importMap();\r\n\r\n    // bad hank\r\n    setTimeout(() => {\r\n      myChart.resize();\r\n    }, 1000);\r\n\r\n    function render() {\r\n      if (!myChart) {\r\n        return;\r\n      }\r\n\r\n      if (ctrl.IS_DATA_CHANGED) {\r\n        myChart.clear();\r\n        echartsData = ctrl.data;\r\n\r\n        eval(ctrl.panel.EchartsOption);\r\n\r\n        myChart.setOption(option);\r\n      }\r\n\r\n      myChart.resize();\r\n    }\r\n\r\n    this.events.on('render', () => {\r\n      render();\r\n      ctrl.renderingCompleted();\r\n    });\r\n  }\r\n}\r\n\r\nEchartsCtrl.templateUrl = 'module.html';\r\n"]}